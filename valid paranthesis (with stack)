Parenthesis Checker

Given a string s, composed of different combinations of '(' , ')', '{', '}', '[', ']', verify the validity of the arrangement.
An input string is valid if:

         1. Open brackets must be closed by the same type of brackets.
         2. Open brackets must be closed in the correct order.

Examples :

Input: s = "[{()}]"
Output: true
Explanation: All the brackets are well-formed.

Input: s = "[()()]{}"
Output: true
Explanation: All the brackets are well-formed.

Input: s = "([]"
Output: False
Explanation: The expression is not balanced as there is a missing ')' at the end.

Input: s = "([{]})"
Output: False
Explanation: The expression is not balanced as there is a closing ']' before the closing '}'



class Solution {
    static boolean isBalanced(String s) {
        Stack<Character>stack=new Stack<>();
        
        for(char ch:s.toCharArray())
        {
            if(ch=='['||ch=='('||ch=='{')
               stack.push(ch);
            else if(ch==']' && !stack.isEmpty() && stack.peek()=='[')
                  stack.pop();
            else if(ch==')' && !stack.isEmpty() && stack.peek()=='(')
                  stack.pop();
            else if(ch=='}' && !stack.isEmpty() && stack.peek()=='{')
                  stack.pop();
            else
                  return false;
        }
        return stack.isEmpty();
    }
}
