Parenthesis Checker

Given a string s, composed of different combinations of '(' , ')', '{', '}', '[', ']', verify the validity of the arrangement.
An input string is valid if:

         1. Open brackets must be closed by the same type of brackets.
         2. Open brackets must be closed in the correct order.

Examples :

Input: s = "[{()}]"
Output: true
Explanation: All the brackets are well-formed.

Input: s = "[()()]{}"
Output: true
Explanation: All the brackets are well-formed.

Input: s = "([]"
Output: False
Explanation: The expression is not balanced as there is a missing ')' at the end.

Input: s = "([{]})"
Output: False
Explanation: The expression is not balanced as there is a closing ']' before the closing '}'


  
class Solution {
    static boolean isBalanced(String s) {
        int str_length=s.length();
        
        char stack[]=new char[str_length];
        int top=-1;
        
        for(int i=0 ; i<str_length ; i++)
        {
            char character=s.charAt(i);
            
            if(character=='(' || character=='[' || character=='{') //if it is the open bracket
            {
                stack[++top]=character;
            }
            else  //if it is the closing bracket
            {   //here i am used top==-1. this is beacause if the closing racket occurs first. it is not the valid paranthsis
                if(top==-1 ||(character==')' && stack[top]!='(')||(character==']' && stack[top]!='[')||(character=='}' && stack[top]!='{'))
                      return false;
                top--;
            }
        }
        return top==-1;
    }
}
